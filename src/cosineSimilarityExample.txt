

Certainly! To implement a cosine similarity algorithm in a React TypeScript application, you'll need to follow these steps:

Steps Overview:
	1. Data Representation: You'll need a representation of the games, platforms, genres, and user preferences. Typically, this data will be in the form of vectors.
	2. Cosine Similarity Calculation: The cosine similarity formula compares two vectors by calculating the cosine of the angle between them. It's a measure of similarity between two non-zero vectors in an inner product space.
	3. Recommender Logic: Using the user's preferences, compute similarity scores with existing games.
	4. React Component: Create the UI and logic to interact with the algorithm.

Let's break this down in code:

1. User Input
You will capture user preferences in terms of platforms and genres. Let's assume the user provides a selection of genres and platforms they like.

interface UserPreferences {
  platforms: string[];
  genres: string[];
}
const userPreferences: UserPreferences = {
  platforms: ["PC", "PS5"],   // User likes these platforms
  genres: ["Action", "RPG"],   // User likes these genres
};

2. Cosine Similarity Calculation
We will now write a helper function to compute the cosine similarity between two vectors. The similarity score will range from 0 to 1 (0 to 100% similarity).
Cosine similarity formula:
cosine similarity=A⋅B∣∣A∣∣∣∣B∣∣\text{cosine similarity} = \frac{A \cdot B}{||A|| ||B||} 
Where AA and BB are two vectors.
Here's how we can implement this:

const cosineSimilarity = (vectorA: number[], vectorB: number[]): number => {
  const dotProduct = vectorA.reduce((sum, value, index) => sum + value * vectorB[index], 0);
  const magnitudeA = Math.sqrt(vectorA.reduce((sum, value) => sum + value * value, 0));
  const magnitudeB = Math.sqrt(vectorB.reduce((sum, value) => sum + value * value, 0));
return dotProduct / (magnitudeA * magnitudeB);
};

3. Vectorization Function
We need a function to convert the game data and user preferences into vectors (one-hot encoding for platforms and genres).

const getGameVector = (game: Game, userPreferences: UserPreferences, allPlatforms: string[], allGenres: string[]): number[] => {
  const platformVector = allPlatforms.map(platform => (game.platforms.includes(platform) ? 1 : 0));
  const genreVector = allGenres.map(genre => (game.genres.includes(genre) ? 1 : 0));
return [...platformVector, ...genreVector];
};

const getUserVector = (userPreferences: UserPreferences, allPlatforms: string[], allGenres: string[]): number[] => {
  const platformVector = allPlatforms.map(platform => (userPreferences.platforms.includes(platform) ? 1 : 0));
  const genreVector = allGenres.map(genre => (userPreferences.genres.includes(genre) ? 1 : 0));
return [...platformVector, ...genreVector];
};

4. Putting It All Together
Now, you can create a function that compares the user preferences against all games and returns the games sorted by similarity.

const recommendGames = (
  gamesData: Game[],
  userPreferences: UserPreferences
): { game: Game; similarity: number }[] => {
  // Extract all unique platforms and genres
  const allPlatforms = Array.from(new Set(gamesData.flatMap(game => game.platforms.concat(userPreferences.platforms))));
  const allGenres = Array.from(new Set(gamesData.flatMap(game => game.genres.concat(userPreferences.genres))));
// Create the user vector
  const userVector = getUserVector(userPreferences, allPlatforms, allGenres);
// Create an array of games with their similarity scores
  const gameScores = gamesData.map(game => {
    const gameVector = getGameVector(game, userPreferences, allPlatforms, allGenres);
    const similarity = cosineSimilarity(userVector, gameVector);
    return { game, similarity };
  });

// Sort games by similarity (high to low)
  gameScores.sort((a, b) => b.similarity - a.similarity);

// Return top 3-5 similar games
  return gameScores.slice(0, 5);
};

// Example usage
const recommendedGames = recommendGames(gamesData, userPreferences);
console.log(recommendedGames);

Example Output:
[
  { "game": { "id": 1, "name": "Game 1", "platforms": ["PC", "PS5"], "genres": ["Action", "RPG"] }, "similarity": 0.85 },
  { "game": { "id": 5, "name": "Game 5", "platforms": ["PC", "PS5"], "genres": ["Adventure", "Action"] }, "similarity": 0.82 },
  { "game": { "id": 3, "name": "Game 3", "platforms": ["PS5", "Xbox"], "genres": ["RPG", "Adventure"] }, "similarity": 0.78 }
]

5. React Component Example
Now, let's set up a basic React component to integrate with this logic:

import React, { useState } from 'react';

const GameRecommender = () => {
  const [userPlatforms, setUserPlatforms] = useState<string[]>(["PC", "PS5"]);
  const [userGenres, setUserGenres] = useState<string[]>(["Action", "RPG"]);
  const [recommendedGames, setRecommendedGames] = useState<{ game: Game; similarity: number }[]>([]);

const handleRecommend = () => {
    const userPreferences: UserPreferences = { platforms: userPlatforms, genres: userGenres };
    const games = recommendGames(gamesData, userPreferences);
    setRecommendedGames(games);
  };

return (
    <div>
      <h1>Game Recommender</h1>
      <button onClick={handleRecommend}>Get Recommendations</button>
      <ul>
        {recommendedGames.map(({ game, similarity }) => (
          <li key={game.id}>
            {game.name} - Similarity: {(similarity * 100).toFixed(2)}%
          </li>
        ))}
      </ul>
    </div>
  );
};

export default GameRecommender;

Summary
	• Cosine Similarity: We used cosine similarity to measure how similar the games are to the user's preferences.
	• Vectors: Games and user preferences were converted to vectors that represent platforms and genres.
	• React Component: The GameRecommender component allows the user to interact and get game recommendations based on their preferences.
This should give you a solid foundation to build upon! You can expand this further by adding more attributes, handling larger datasets, or even integrating with a backend API.
